export EDITOR=hx

# environment variable with path to system nixpkgs
export NIXPKGS=${NIX_PATH:8}

# infinite bash history
export HISTFILESIZE=
export HISTSIZE=
export HISTFILE=~/.bash_eternal_history

# add autocomplete for doas
complete -cf doas

alias sudo='doas'

fuzzy_history() {
    # if first argument is passed in, it is used as a hook to consume fuzzy_history_out
    # eg fuzzy_history eval
    local fuzzy_history_out=$( cat ~/.bash_eternal_history | fzf )
    if [[ -n "$1" ]]; then
        "$1" $fuzzy_history_out
    else
        echo $fuzzy_history_out
    fi
}


inspect_variable() {
    # select an environment variable and then print it
    var=$(awk 'BEGIN {for (var in ENVIRON) print var}' | fzf)
    printenv $var
}

inspect_function() {
    # select bash function and view its source
    local function_name=$( declare -F | awk '{print $NF}' | fzf ) # get function name
    local output_file="/tmp/$function_name.sh"
    type $function_name > $output_file # get source of function and write to output file
    sed -i '1d' $output_file # remove header
    $EDITOR $output_file
}


disassemble() {
    local flags="--disassemble="$2" -M intel --visualize-jumps=extended-color --no-show-raw-insn --no-addresses -w"
    objdump $flags "$1" | grep -v -E 'Disassembly of section|file format|^\s*$' | c++filt

}


fuzzy_disassemble() {
    # select symbols using nm and fzf
    local symbols=$( nm "$1" | awk '{print $(NF-1), $NF}' | grep -E '^[tT]' | awk '{print $NF}' | fzf )
    for symbol in $symbols
    do
        # disassemble each symbol
        disassemble $1 $symbol
        printf '\n'
    done
}

nix_closure_size() {
    # compute the closure size of anything which evaluates to a derivation
    local closure=$(nix-store -qR --include-outputs $(nix-instantiate $1))
    nix-store -q --size $closure | awk '{ a+=$1 } END { print a / (1000 * 1000) }'
}

# determine if shell is pseudoterminal
is_pseudoterminal() {
    ls -l /proc/$$/fd | grep pts > /dev/null
}

SHOW_PWD='no'

toggle_pwd() {
    if [ $SHOW_PWD == no ]
    then
        SHOW_PWD=yes
    else
        SHOW_PWD=no
    fi
}

mute() {
    wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
}

volume() {
    wpctl set-volume @DEFAULT_AUDIO_SINK@ $1
}

update_title() {
    if [ $SHOW_PWD == yes ]
    then
        echo -ne "\033]0;$(whoami)@$(hostname):$(pwd)\007"
    else
        echo -ne "\033]0;$(whoami)@$(hostname)\007"
    fi

    # write history after each prompt
    history -a
}

GIT_SHORT_HASH=""

update_git_short_hash() {
    if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        GIT_SHORT_HASH=$(git rev-parse --short=3 HEAD)
        local green='\033[0;32m'
        local red='\033[0;31m'
        local reset='\033[0m'
        if [[ -z $(git status --porcelain) ]]; then
            GIT_SHORT_HASH="${green}${GIT_SHORT_HASH}${reset}"
        else
            GIT_SHORT_HASH="${red}${GIT_SHORT_HASH}${reset}"
        fi

        GIT_SHORT_HASH="${GIT_SHORT_HASH} "
    else
        GIT_SHORT_HASH=""
    fi
}

update_prompt() {
    PS1="${GIT_SHORT_HASH}${PROMPT} "
}

prompt_command() {
    update_title
    update_git_short_hash
    update_prompt
}

PROMPTS=(🍏 🍎 🍐 🍊 🍋 🍌 🍉 🍇 🍓 🫐 🍈 🍒 🥭 🍍 🥥 🥝 🍅 🍆 🥑 🥦 🥬 🥒 🫑 🌽 🥕 🫒 🧄)

if is_pseudoterminal
then
    PROMPTS_SIZE=${#PROMPTS[@]}
    PROMPT_INDEX=$(($RANDOM % $PROMPTS_SIZE))
    PROMPT=${PROMPTS[$PROMPT_INDEX]}
    PROMPT_COMMAND='prompt_command'
fi

# if direnv is available, initialize it
if which direnv >/dev/null 2>&1; then
    eval "$(direnv hook bash)"
fi
